// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  bio           String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Onboarding fields
  onboardingCompleted Boolean @default(false)
  country             String?
  currentProject      String?
  hearAboutUs         String?

  accounts   Account[]
  sessions   Session[]
  posts      Post[]
  comments   Comment[]
  votes      Vote[]
  follows    Follow[]  @relation("UserFollows")
  followers  Follow[]  @relation("UserFollowers")
  chatRooms  ChatRoom[]
  messages   Message[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core application models
model Post {
  id          String    @id @default(cuid())
  title       String
  content     String?   @db.Text
  url         String?
  type        PostType  @default(RESOURCE)
  tags        String[]
  slug        String    @unique
  published   Boolean   @default(true)
  featured    Boolean   @default(false)
  voteCount   Int       @default(0)
  commentCount Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    Vote[]
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  authorId  String
  parentId  String?
  voteCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  votes    Vote[]
  
  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  type      VoteType
  createdAt DateTime @default(now())
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("votes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}

// Chat system models
model ChatRoom {
  id        String     @id @default(cuid())
  name      String?
  type      ChatType   @default(DIRECT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  users    User[]
  messages Message[]
  
  @@map("chat_rooms")
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  chatRoomId String
  senderId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PostType {
  RESOURCE
  STRATEGY
  STORY
}

enum VoteType {
  UP
  DOWN
}

enum ChatType {
  DIRECT
  GROUP
} 